{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//get funds from users\n//withdraw funds\n//Set a minimum funding value in USD\n\n//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\n/**@title A sample Funding Contract\n * @author Patrick Collins\n * @notice This contract is for creating a sample funding contract\n * @dev This implements price feeds as our library\n */\n\ncontract FundMe {\n    // 832511\n    // 812595\n\n    //type declarations\n    using PriceConverter for uint256;\n\n    //state variables\n    uint256 public constant MINIMUM_USD = 10 * 1e18;\n    //21,415 gas - constant\n    //23,515 gas - non-constant\n    //It saves almost an entire dollar\n\n    address[] private s_funders;\n\n    mapping(address => uint256) private s_addressToAmountFunded;\n\n    address private immutable i_owner;\n    AggregatorV3Interface private s_priceFeed;\n\n    // normal - 23622 gas\n    // immutable - 21508 gas\n    // immutable and constant are saving gas because\n    // they are not using storage, they are storing into bytecode of contract\n\n    modifier onlyOwner() {\n        // require(i_owner == msg.sender, FundMe__NotOwner());\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n\n        _; // if this was before require, rest of the code will be executed first, and then require of this modifier will work\n    }\n\n    // Functions Order:\n    //// constructor\n    //// receive\n    //// fallback\n    //// external\n    //// public\n    //// internal\n    //// private\n    //// view / pure\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // What happens if someone sends ETH to this contract without calling the fund function\n    // receive()\n    // fallback()\n\n    function fund() public payable {\n        // want to be able to set minimum fund amount in USD\n        // 1. How do we send ETH to a contract\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough\"\n        );\n\n        // 1e18 = 1*10**18\n        // if getConversionRate() had 2 parameters, then it would be passed inside Like msg.value.getConversionRate(2nd para);\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n        //what is reverting\n        //undo any action that happens before require in same scope, sends the remaining gas back\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            s_addressToAmountFunded[s_funders[funderIndex]] = 0;\n        }\n        // reset the array\n        s_funders = new address[](0);\n        // actually withdraw\n        // 3 ways of sending eth are\n        // transfer - auto revert if fails\n        // payable(msg.sender).transfer(address(this).balance);\n        // send - doesn't auto revert if fails and return a bool\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed!\");\n        // call - returns 2 var- bool ,bytes\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n        // revert();\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        //mappings can't be in memory\n\n        for (uint256 funderIndex; funderIndex < funders.length; funderIndex++) {\n            s_addressToAmountFunded[funders[funderIndex]] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = payable(i_owner).call{\n            value: address(this).balance\n        }(\"\");\n\n        require(callSuccess);\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address funder)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    //Cant have state variables and cant send eth\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        //ABI\n        //Address -0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in terms of USD\n        // 3000.00000000\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}