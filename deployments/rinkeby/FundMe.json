{
  "address": "0xb408231469460d9c4388C8c43d77585f28Aa28f2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x28760f1823cb715b04ab3ea26c30e41efee4d1b3612631c436e68ec87ad9085b",
  "receipt": {
    "to": null,
    "from": "0x0Cb38950DE9c36c8D2D7B0f33b1B1B6058527fb9",
    "contractAddress": "0xb408231469460d9c4388C8c43d77585f28Aa28f2",
    "transactionIndex": 9,
    "gasUsed": "853647",
    "logsBloom": "0x
    "blockHash": "0x0845c1b6b2fe0b3ce9262e7a046d1c40504d24f3609d04ccfa2e2fa8b3000263",
    "transactionHash": "0x28760f1823cb715b04ab3ea26c30e41efee4d1b3612631c436e68ec87ad9085b",
    "logs": [],
    "blockNumber": 11375335,
    "cumulativeGasUsed": "2148484",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "afd8f432180dc3d4f26ad051485e20db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//get funds from users\\n//withdraw funds\\n//Set a minimum funding value in USD\\n\\n//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nerror NotOwner();\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract FundMe {\\n    // 832511\\n    // 812595\\n    using PriceConverter for uint256;\\n    uint256 public constant MINIMUM_USD = 10 * 1e18;\\n    //21,415 gas - constant\\n    //23,515 gas - non-constant\\n    //It saves almost an entire dollar\\n\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    address public immutable i_owner;\\n    AggregatorV3Interface public priceFeed;\\n\\n    // normal - 23622 gas\\n    // immutable - 21508 gas\\n    // immutable and constant are saving gas because\\n    // they are not using storage, they are storing into bytecode of contract\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        // want to be able to set minimum fund amount in USD\\n        // 1. How do we send ETH to a contract\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough\\\"\\n        );\\n\\n        // 1e18 = 1*10**18\\n        // if getConversionRate() had 2 parameters, then it would be passed inside Like msg.value.getConversionRate(2nd para);\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] = msg.value;\\n        //what is reverting\\n        //undo any action that happens before require in same scope, sends the remaining gas back\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex; funderIndex < funders.length; funderIndex++) {\\n            addressToAmountFunded[funders[funderIndex]] = 0;\\n        }\\n        // reset the array\\n        funders = new address[](0);\\n        // actually withdraw\\n        // 3 ways of sending eth are\\n        // transfer - auto revert if fails\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // send - doesn't auto revert if fails and return a bool\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed!\\\");\\n        // call - returns 2 var- bool ,bytes\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n        // revert();\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(i_owner == msg.sender, NotOwner());\\n        if (msg.sender != i_owner) {\\n            revert NotOwner();\\n        }\\n        _; // if this was before require, rest of the code will be executed first, and then require of this modifier will work\\n    }\\n\\n    // What happens if someone sends ETH to this contract without calling the fund function\\n    // receive()\\n    // fallback()\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x5e3772b7a32d2877f7e7288a71c35d0729c2fdffd64f432a7c177494bdd97019\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    //Cant have state variables and cant send eth\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //ABI\\n        //Address -0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH in terms of USD\\n        // 3000.00000000\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x88b80f715266c277f58cee87f3fcb1a7eed8059931b21622c42ce729edc4aefc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f75380380610f7583398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e10610165600039600081816102d301526105570152610e106000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b005b3480156100b057600080fd5b506100cb60048036038101906100c6919061079e565b61050b565b6040516100d891906107e4565b60405180910390f35b3480156100ed57600080fd5b506100f6610523565b60405161010391906107e4565b60405180910390f35b34801561011857600080fd5b5061012161052f565b60405161012e919061085e565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610555565b6040516101639190610888565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108cf565b610579565b6040516101a09190610888565b60405180910390f35b678ac7230489e800006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b890919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610959565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610356576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103fb5760006001600080848154811061037f5761037e610979565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806103f3906109d7565b915050610359565b50600067ffffffffffffffff81111561041757610416610a20565b5b6040519080825280602002602001820160405280156104455781602001602082028036833780820191505090505b506000908051906020019061045b929190610694565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048290610a80565b60006040518083038185875af1925050503d80600081146104bf576040519150601f19603f3d011682016040523d82523d6000602084013e6104c4565b606091505b5050905080610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff90610ae1565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b678ac7230489e8000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061058957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105c4836105f4565b90506000670de0b6b3a764000085836105dd9190610b01565b6105e79190610b8a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190610c48565b5050509150506402540be4008161068c9190610cc3565b915050919050565b82805482825590600052602060002090810192821561070d579160200282015b8281111561070c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b4565b5b50905061071a919061071e565b5090565b5b8082111561073757600081600090555060010161071f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076b82610740565b9050919050565b61077b81610760565b811461078657600080fd5b50565b60008135905061079881610772565b92915050565b6000602082840312156107b4576107b361073b565b5b60006107c284828501610789565b91505092915050565b6000819050919050565b6107de816107cb565b82525050565b60006020820190506107f960008301846107d5565b92915050565b6000819050919050565b600061082461081f61081a84610740565b6107ff565b610740565b9050919050565b600061083682610809565b9050919050565b60006108488261082b565b9050919050565b6108588161083d565b82525050565b6000602082019050610873600083018461084f565b92915050565b61088281610760565b82525050565b600060208201905061089d6000830184610879565b92915050565b6108ac816107cb565b81146108b757600080fd5b50565b6000813590506108c9816108a3565b92915050565b6000602082840312156108e5576108e461073b565b5b60006108f3848285016108ba565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b60006109436012836108fc565b915061094e8261090d565b602082019050919050565b6000602082019050818103600083015261097281610936565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109e2826107cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1557610a146109a8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a6a600083610a4f565b9150610a7582610a5a565b600082019050919050565b6000610a8b82610a5d565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610acb600b836108fc565b9150610ad682610a95565b602082019050919050565b60006020820190508181036000830152610afa81610abe565b9050919050565b6000610b0c826107cb565b9150610b17836107cb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5057610b4f6109a8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b95826107cb565b9150610ba0836107cb565b925082610bb057610baf610b5b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bda81610bbb565b8114610be557600080fd5b50565b600081519050610bf781610bd1565b92915050565b6000819050919050565b610c1081610bfd565b8114610c1b57600080fd5b50565b600081519050610c2d81610c07565b92915050565b600081519050610c42816108a3565b92915050565b600080600080600060a08688031215610c6457610c6361073b565b5b6000610c7288828901610be8565b9550506020610c8388828901610c1e565b9450506040610c9488828901610c33565b9350506060610ca588828901610c33565b9250506080610cb688828901610be8565b9150509295509295909350565b6000610cce82610bfd565b9150610cd983610bfd565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1857610d176109a8565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5557610d546109a8565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d9257610d916109a8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dcf57610dce6109a8565b5b82820290509291505056fea264697066735822122025e9ccc7b51253369f9950801564551c215767cb321ce40f9c76b9831a9593f864736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b005b3480156100b057600080fd5b506100cb60048036038101906100c6919061079e565b61050b565b6040516100d891906107e4565b60405180910390f35b3480156100ed57600080fd5b506100f6610523565b60405161010391906107e4565b60405180910390f35b34801561011857600080fd5b5061012161052f565b60405161012e919061085e565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610555565b6040516101639190610888565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108cf565b610579565b6040516101a09190610888565b60405180910390f35b678ac7230489e800006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b890919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610959565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610356576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103fb5760006001600080848154811061037f5761037e610979565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806103f3906109d7565b915050610359565b50600067ffffffffffffffff81111561041757610416610a20565b5b6040519080825280602002602001820160405280156104455781602001602082028036833780820191505090505b506000908051906020019061045b929190610694565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048290610a80565b60006040518083038185875af1925050503d80600081146104bf576040519150601f19603f3d011682016040523d82523d6000602084013e6104c4565b606091505b5050905080610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff90610ae1565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b678ac7230489e8000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061058957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105c4836105f4565b90506000670de0b6b3a764000085836105dd9190610b01565b6105e79190610b8a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190610c48565b5050509150506402540be4008161068c9190610cc3565b915050919050565b82805482825590600052602060002090810192821561070d579160200282015b8281111561070c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b4565b5b50905061071a919061071e565b5090565b5b8082111561073757600081600090555060010161071f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076b82610740565b9050919050565b61077b81610760565b811461078657600080fd5b50565b60008135905061079881610772565b92915050565b6000602082840312156107b4576107b361073b565b5b60006107c284828501610789565b91505092915050565b6000819050919050565b6107de816107cb565b82525050565b60006020820190506107f960008301846107d5565b92915050565b6000819050919050565b600061082461081f61081a84610740565b6107ff565b610740565b9050919050565b600061083682610809565b9050919050565b60006108488261082b565b9050919050565b6108588161083d565b82525050565b6000602082019050610873600083018461084f565b92915050565b61088281610760565b82525050565b600060208201905061089d6000830184610879565b92915050565b6108ac816107cb565b81146108b757600080fd5b50565b6000813590506108c9816108a3565b92915050565b6000602082840312156108e5576108e461073b565b5b60006108f3848285016108ba565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b60006109436012836108fc565b915061094e8261090d565b602082019050919050565b6000602082019050818103600083015261097281610936565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109e2826107cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1557610a146109a8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a6a600083610a4f565b9150610a7582610a5a565b600082019050919050565b6000610a8b82610a5d565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610acb600b836108fc565b9150610ad682610a95565b602082019050919050565b60006020820190508181036000830152610afa81610abe565b9050919050565b6000610b0c826107cb565b9150610b17836107cb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5057610b4f6109a8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b95826107cb565b9150610ba0836107cb565b925082610bb057610baf610b5b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bda81610bbb565b8114610be557600080fd5b50565b600081519050610bf781610bd1565b92915050565b6000819050919050565b610c1081610bfd565b8114610c1b57600080fd5b50565b600081519050610c2d81610c07565b92915050565b600081519050610c42816108a3565b92915050565b600080600080600060a08688031215610c6457610c6361073b565b5b6000610c7288828901610be8565b9550506020610c8388828901610c1e565b9450506040610c9488828901610c33565b9350506060610ca588828901610c33565b9250506080610cb688828901610be8565b9150509295509295909350565b6000610cce82610bfd565b9150610cd983610bfd565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1857610d176109a8565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5557610d546109a8565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d9257610d916109a8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dcf57610dce6109a8565b5b82820290509291505056fea264697066735822122025e9ccc7b51253369f9950801564551c215767cb321ce40f9c76b9831a9593f864736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}